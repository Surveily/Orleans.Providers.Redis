jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - script: dotnet restore
    displayName: 'Restore dependencies'

  - script: dotnet build
    displayName: 'Build'

  - script: docker run -d --name test-redis --rm -p 6379:6379 redis
    displayName: 'Start Redis docker container for tests'

  - script: dotnet test -v $(Debug.VerboseLevel) --logger trx
    displayName: 'Run automated tests'
    continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      failOnStandardError: 'true'

  - script: docker container kill test-redis
    displayName: 'Cleanup Redis docker container'

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - script: dotnet restore
    displayName: 'Restore dependencies'

  - script: dotnet build
    displayName: 'Build'

  - script: |
      choco install -y redis-64
      start "redis" redis-server
    displayName: 'Install and run Redis for tests'

  - script: dotnet test -v $(Debug.VerboseLevel) --logger trx
    displayName: 'Run automated tests'
    continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      failOnStandardError: 'true'

  - script: |
      taskkill /IM redis-server.exe
      choco uninstall redis-64
    displayName: 'Cleanup Redis'
- job: macOS
  pool:
    vmImage: 'macOS-10.13'

  steps:
  - script: dotnet restore
    displayName: 'Restore dependencies'

  - script: dotnet build
    displayName: 'Build'

  - script: |
      brew install redis
      brew services start redis
    displayName: 'Install and run Redis for tests'

  - script: dotnet test -v $(Debug.VerboseLevel) --logger trx
    displayName: 'Run automated tests'
    continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      failOnStandardError: 'true'

  - script: |
      brew services stop redis
      brew uninstall redis
    displayName: 'Cleanup Redis'

- job: Publish
  condition: |
    and(
      succeeded(),
      or(
        eq(variables['Publish.Force'], 'true'),
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        eq(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    )

  dependsOn:
  - Linux
  - Windows
  - macOS

  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - script: dotnet restore
    displayName: 'Restoring Packages'

  - script: dotnet build --configuration Debug --version-suffix $(Build.BuildNumber)
    condition: |
      or(
        and(
          eq(variables['Publish.Force'], 'false'),
          ne(variables['Build.SourceBranch'], 'refs/heads/release')
        ),
        and(
          eq(variables['Publish.Force'], 'true'),
          eq(variables['Publish.Target'], 'ci')
        )
      )
    displayName: 'Building'

  - script: dotnet build --configuration Release
    condition: |
      or(
        and(
          eq(variables['Publish.Force'], 'false'),
          eq(variables['Build.SourceBranch'], 'refs/heads/release')
        ),
        and(
          eq(variables['Publish.Force'], 'true'),
          eq(variables['Publish.Target'], 'release')
        )
      )
    displayName: 'Building (Release)'

  - task: NuGetCommand@2
    displayName: 'Publishing Build'
    condition: succeeded()
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'Zuercher.NuGet'
      packagesToPush: './Artifacts/**/*.nupkg'
